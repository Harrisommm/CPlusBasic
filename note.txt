This is class note for C++ beginning course

#BITWISE OPERATORS
& and //both are 1, & is 1
| or //only and both 1, : is 1
^ x -or // only 1, ^ is 1  both 1, ^ is 0
<< // 00000101 <<1 = 00001010 mutiply by 2 in binary
>> // 00001010 >>1 = 00000101 divided by 2 in binary

#ENUM
enum day {mon, tue, wed ...} // automatically assign from 0-6
or enum day {mon = 1, tue, ....}
int main()
{
    day d;
    d = mon;
    if(d == mon)
}

#TYPEDEF
easy to remember variable names
more readable

typedef int marks;
int main()
{
    marks m1,m2,m3;
}

#LOGICAL OPERATORS
&& and, when both are true = true
|| or, true + true = true, true + false = true
! not

#SHORT CIRCUIT
if( a > b && a > c) // if (a > b) is false, (a > c) will not be  executed
if( a > b || a > c) // if (a > b) is true, (a > c) will not be  executed

#DYNAMIC DECLARATION
for(int i = 2, i < 10, i ++) // i can be declared in condition, but limited to the block
{

} 
cout << i; //undeclared, out of block

#SWITCH CASE
swtich(expr) //expr can be int/char
{
    case 1: ____; //or case 'a': if expr is char
        break; //if there are no break, case1, case2 will be executed
    case 2: ____;
        break;
    default: cout << "invalid input" //optional, can be in anywhere
}

#LOOP/ITERATE STATEMENT
while(<condition>) //check condition and process
{
    process;
}

do //first process and check condition
{
    process;    
}while(<condition>);

for(initialization; condition; updation)
{
    process;
}


#ARRAYS
int A[10]; // doesn't work, empty A[10] = {1,2,3,4,5,6,7,8,9,10};
std::cout << A[3] // 4
std::cout << A //not working
int A[];
float A[];
char A[5] = {'A','B', ...}

FOR EACH LOOP

for(int x:A) //x (for each element) in A //or auto x:A
{
    std::cout << x << endl;
}
//don't have to declare the size of an array

LINEAR SEARCH
//search key elemeny one by one
//n time to find
for(int i=0; i<10; i++)
{
    if(key==A[i])
    {
        cout << "key is " << i;
        exit(0); // terminate 
    }
}
cout << "key not found";
return 0;
BINARY SEARCH //the array need to be sorted
int l=0, h=9, key;
//log n time to find

INT_MIN //minimum integer value
INT_MAX //maximum "

NESTED FOR LOOP
for(int i = 0; i < 3; i++)
{
    for(int j = 0; j < 3; j++)
    {
        std::cout << i << j << std::endl;
    }
}
outcome = 00 01 02 03 10 11 12 13 20 21 22 23 

2D ARRAYS
int A[2][3] = {{1,2},{2,3},{3,4}};
for(int i=0; i<2; i++)
{
    for(int j=0; j<3; j++)
    {
        cout << A[i][j]
    }
    cout << endl;
}

matrix addition
{
    for(int j=0; j<3; j++)
    {
        C[i][j] = A[i][j] + B[i][j];
    }
    cout << endl;
}

for(auto& x:A) //& is reference
{
    for(int j=0; j<3; j++)
    {
        cout << A[i][j]
    }
    cout << endl;
}

#POINTERS
1.data variable // int x=10;
2.address variable // int *p; p=&x;
std::cout << x; //10
std::cout << &x; //200 //address of x
std::cout << p; //200 //address of x
std::cout << &p; //300 //address of p
std::cout << *p; //10, data p is pointing

int *p; //declaration
p = &x; //initializtion
cout << *p; //dereferencing

why use pointers?
-to access heap, code -> stack -> heap

HEAP MEMORY ALLOCATION
main()
{
    int A[5] = {1,2,3,4,5}; //array initialization in stack
    int *p; //also in stack
    p = new int[5]; //array in heap, adress of array is in heap
    int *p = new int[5];
    p[2] = 15; //acccess heap array

    *p = nullptr; //null pointer
    delete []p; //must go this order, or memory leak

}

Difference heap array and stack array
stack array automatically deleted whe its out of scope
heap array stays there while program run should delete []p;

if not deleted -> memory leak problem
